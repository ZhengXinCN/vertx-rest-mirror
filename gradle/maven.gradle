/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// maven task configuration

signing {
    if (project.hasProperty('signArchives')) {
	    sign configurations.archives
     }
}

if (!project.hasProperty('repoUsername')) {
    ext.repoUsername = 'randomUsername'
} else {
    println 'got property repoUsername: ' + repoUsername
}

if (!project.hasProperty('repoPassword')) {
    ext.repoPassword = 'randomPassword'
} else {
    println 'got property repoPassword: ' + repoPassword
}

if(!project.hasProperty('uploadRepository')) {
    ext.uploadRepository = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
} else {
    println 'found custom uploadRepository: ' + uploadRepository
}

if(!project.hasProperty('snapshotRepository')) {
    ext.snapshotRepository = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
} else {
    println 'found custom snapshotRepository: ' + snapshotRepository
}

if (!project.hasProperty('sonatypeUsername')) {
    ext.sonatypeUsername = 'sonatypeUsername'
} else {
    println 'got property sonatypeUsername: ' + repoUsername
}

if (!project.hasProperty('sonatypePassword')) {
    ext.sonatypePassword = 'sonatypePassword'
} else {
    println 'got property sonatypePassword: ' + repoPassword
}

uploadArchives {
    repositories {
        mavenDeployer {

            if ("$uploadRepository".toLowerCase().contains("sonatype")) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
		
			repository(url: "$uploadRepository") {
                authentication(userName: "$repoUsername", password: "$repoPassword")
            }

            snapshotRepository(url: "$snapshotRepository") {
                authentication(userName: "$repoUsername", password: "$repoPassword")
            }
	
            pom.project {
                name 'vertx-rest-storage'
                packaging 'zip'
                description 'Stores resources in a hierarchical way according to their URI. It actually implements a generic CRUD REST service.'
                url 'https://github.com/swisspush/vertx-rest-storage'

                scm {
                    url 'scm:git@github.com:swisspush/vertx-rest-storage.git'
                    connection 'scm:git@github.com:swisspush/vertx-rest-storage.git'
                    developerConnection 'scm:git@github.com:swisspush/vertx-rest-storage.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'floriankammermann'
                        name 'Florian Kammermann'
                    }
                    developer {
                        id 'lbovet'
                        name 'Laurent Bovet'
                    }
                }
            }
        }
    }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// configuration methods



